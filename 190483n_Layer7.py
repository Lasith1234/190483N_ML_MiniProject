# -*- coding: utf-8 -*-
"""190483N_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iW2FL8vdLQwd8s4sEa9Ar4AH6PRn8DTg

Importing all the Libraries that are needed
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas import Series

from sklearn.utils import class_weight
from sklearn import svm
from sklearn import metrics
from sklearn.metrics import f1_score
from sklearn.metrics import confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.feature_selection import SelectKBest, f_classif, chi2
import numpy as np

#Reading all datasets available

train_set = pd.read_csv('/content/drive/MyDrive/ML/Data Sets/speech-based-classification-layer-7/train.csv')
test_set = pd.read_csv('/content/drive/MyDrive/ML/Data Sets/speech-based-classification-layer-7/test.csv')
valid_set = pd.read_csv('/content/drive/MyDrive/ML/Data Sets/speech-based-classification-layer-7/valid.csv')

#Checking whether there are coloumns with missing values

null_val_cols = train_set.columns[train_set.isnull().any()]

for col in null_val_cols:
    print(col)

#Removing rows with unavailable values in label_2 in both train and valid data sets

train_set = train_set.dropna(subset=['label_2'])
valid_set = valid_set.dropna(subset=['label_2'])
#train_set.to_csv('/content/drive/MyDrive/ML/Data Sets/speech-based-classification-layer-12/cleaned_train_set.csv', index=False)
train_set.head()

#Formating the datasets in the way we want. Features and labelts are being seperated and done seperately for both Train and valid sets
classifier = SVC()

X = pd.DataFrame(train_set.iloc[:, :-4].values)
label_1 = train_set['label_1']
label_2 = train_set['label_2']
label_3 = train_set['label_3']
label_4 = train_set['label_4']

X_valid = pd.DataFrame(valid_set.iloc[:, :-4].values)
label_1_valid = valid_set['label_1']
label_2_valid = valid_set['label_2']
label_3_valid = valid_set['label_3']
label_4_valid = valid_set['label_4']

#Initial accuracy is being checked after training through a svc model.

classifier.fit(X,label_1)
predicted_label1 = classifier.predict(X_valid)

print("accuracy_score: ",metrics.accuracy_score(label_1_valid, predicted_label1))
print("f1_score: ",f1_score(label_1_valid, predicted_label1, average='weighted')) #f-1 score
print("precision_score: ",metrics.precision_score(label_1_valid, predicted_label1, average='weighted' ))
print("recall_score: ",metrics.recall_score(label_1_valid, predicted_label1, average='weighted'))

"""###Label 1"""

# @title Grid Search

#Trying out Grid search for parameter tuning.Takes a long time to porvide a good solution.

from sklearn.model_selection import GridSearchCV

clf = GridSearchCV(svm.SVC(gamma='auto'),{
    'C': [1,10,20],
    'kernel':['rbf','linear']
}, cv=5, return_train_score=False)

clf.fit(X,label_1)
clf.cv_results_

# @title Grid Search results
df = pd.DataFrame(clf.cv_results_)
df[['param_C','param_kernel','mean_test_score']]

# @title Grid Search Best Score
clf.best_score_

# @title Grid Search Best Params
clf.best_params_

# @title SVC classifier with the best Parameters
classifier = SVC(C=1, kernel='linear')
classifier.fit(X,label_1)

predicted_label1 = classifier.predict(X_valid)

print("accuracy_score: ",metrics.accuracy_score(label_1_valid, predicted_label1))
print("f1_score: ",f1_score(label_1_valid, predicted_label1, average='weighted')) #f-1 score
print("precision_score: ",metrics.precision_score(label_1_valid, predicted_label1, average='weighted' ))
print("recall_score: ",metrics.recall_score(label_1_valid, predicted_label1, average='weighted'))

print(X.shape)  # Check the shape of X_train
print(test_set.shape)   # Check the shape of X_test

# @title Making a csv with the test results
#Since svm gave the best accuracy

X_test = pd.DataFrame(test_set.iloc[:, 1:].values)
predicted_label_test = classifier.predict(X_test)

predicted_df = pd.DataFrame({'label_1': predicted_label_test})

# Save the DataFrame to a CSV file
predicted_df.to_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label1.csv', index=False)

selector = SelectKBest(f_classif, k=200)
x_new = selector.fit_transform(X, label_1)
x_valid_df_after_f_classif = selector.transform(X_valid)

classifier = SVC(C=1, kernel='linear')
classifier.fit(x_new,label_1)
predicted_label1 = classifier.predict(x_valid_df_after_f_classif)

print("accuracy_score: ",metrics.accuracy_score(label_1_valid, predicted_label1))
print("f1_score: ",f1_score(label_1_valid, predicted_label1, average='weighted')) #f-1 score
print("precision_score: ",metrics.precision_score(label_1_valid, predicted_label1, average='weighted' ))
print("recall_score: ",metrics.recall_score(label_1_valid, predicted_label1, average='weighted'))

# @title PCA on the datasets
from sklearn.decomposition import PCA

pca = PCA(n_components=0.95, svd_solver='full')
pca.fit(X)
x_train_trf = pd.DataFrame(pca.transform(X))
x_valid_trf_pca = pd.DataFrame(pca.transform(X_valid))
print('Shape after PCA: ',x_train_trf.shape)

# @title using the classifier to check accuracy

classifier = svm.SVC(C=1, kernel='linear')
classifier.fit(x_train_trf,label_1)
predicted_label1 = classifier.predict(x_valid_trf_pca)

print("accuracy_score: ",metrics.accuracy_score(label_1_valid, predicted_label1))
print("f1_score: ",f1_score(label_1_valid, predicted_label1, average='weighted')) #f-1 score
print("precision_score: ",metrics.precision_score(label_1_valid, predicted_label1, average='weighted' ))
print("recall_score: ",metrics.recall_score(label_1_valid, predicted_label1, average='weighted'))

# @title svm classifier with parameters
classifier = SVC(C=1, kernel='linear')
classifier.fit(X,label_1)

predicted_label1 = classifier.predict(X_valid)

print("accuracy_score: ",metrics.accuracy_score(label_1_valid, predicted_label1))
print("f1_score: ",f1_score(label_1_valid, predicted_label1, average='weighted')) #f-1 score
print("precision_score: ",metrics.precision_score(label_1_valid, predicted_label1, average='weighted' ))
print("recall_score: ",metrics.recall_score(label_1_valid, predicted_label1, average='weighted'))

"""#Label 3"""

# @title PCA for Label 3
from sklearn.decomposition import PCA

#Validation
pca = PCA(n_components=0.95, svd_solver='full')
pca.fit(X)
x_train_pca = pd.DataFrame(pca.transform(X)) #train
x_valid_pca = pd.DataFrame(pca.transform(X_valid)) #valid
x_test_pca = pd.DataFrame(pca.transform(X_test))
print('Shape after PCA: ',x_train_pca.shape)

# @title svm classifier without pca
from sklearn import svm

# For classification with a linear kernel
classifier = svm.SVC(kernel='linear', C=1)

# For regression with a linear kernel
# classifier = svm.SVR(kernel='linear', C=1.0)

# Train the model
# classifier.fit(x_train_df, y_train_df)
classifier.fit(X, label_3)

#predict for validation
y_valid_pred = classifier.predict(X_valid)

#accuracy
print("accuracy_score: ",metrics.accuracy_score(label_3_valid, y_valid_pred))

# @title svm classifier with pca
from sklearn import svm

# For classification with a linear kernel
classifier = svm.SVC(kernel='linear', C=1)

# For regression with a linear kernel
# classifier = svm.SVR(kernel='linear', C=1.0)

# Train the model
# classifier.fit(x_train_df, y_train_df)
classifier.fit(x_train_pca, label_3)

#predict for validation
y_valid_pred = classifier.predict(x_valid_pca)

#accuracy
print("accuracy_score: ",metrics.accuracy_score(label_3_valid, y_valid_pred))

# @title Label 3 random search
from sklearn.svm import SVC
from sklearn.model_selection import RandomizedSearchCV
from scipy.stats import uniform, randint  # For defining parameter distributions
import numpy as np

param_dist = {
    'C': [100,10,1,0,0.1,0.01],
    'kernel': ['rbf','linear','poly','sigmoid'],
    'gamma': ['scale','auto'],
    'degree': [1,2,3,4],  # For the polynomial kernel
    'class_weight' : ['none','balanced']
}

svm = SVC()

random_search = RandomizedSearchCV(
    svm, param_distributions=param_dist, n_iter=10, cv=5, n_jobs=-1, random_state=42, scoring='accuracy'
)

random_search.fit(x_train_pca, label_3)

best_params = random_search.best_params_
best_model = random_search.best_estimator_

print("best parameters:", best_params)

print("Shape of X:", x_train_pca.shape)
print("Shape of y:", label_3.shape)

# @title Hyper parameter tuning
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.model_selection import cross_val_score, StratifiedKFold
from scipy.stats import uniform
from sklearn.experimental import enable_halving_search_cv
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV,HalvingGridSearchCV

# Define the hyperparameter grid
param_grid = {
    'C': [0.1,1,10,20,100],
    'kernel': ['linear', 'rbf', 'poly', 'sigmoid'],  # Experiment with different kernels
    'gamma':['scale', 'auto'],
    'degree': [1,2,3,4]

}

# Create an SVM classifier
svm_classifier = SVC(class_weight='balanced')

# Perform grid search with cross-validation
grid_search = HalvingGridSearchCV(svm_classifier, param_grid, scoring='accuracy', cv=5,n_jobs=-1, factor=2, verbose=1)
grid_search.fit(x_train_pca, label_3)

# Get the best model and hyperparameters
best_svm_classifier = grid_search.best_estimator_
best_params = grid_search.best_params_

# Make predictions on the validation set
y_pred = best_svm_classifier.predict(x_valid_pca)

# Evaluate the model
print("Best Hyperparameters:", best_params)

#@title svm classifier with pca
from sklearn import svm
classifier_label3 = svm.SVC(kernel='rbf', C=10, gamma='auto', degree=1)

classifier_label3.fit(x_train_pca, label_3)

#predict for validation
y_valid_pred = classifier_label3.predict(x_valid_pca)

#accuracy
print("accuracy_score: ",metrics.accuracy_score(label_3_valid, y_valid_pred))

#predict
# y_test_pred = classifier.predict(x_test_df)
#y_test_predict_after_pca = classifier.predict(x_test_df_pca)

#@title Making csv for label 3
predicted_label_test = classifier_label3.predict(x_test_pca)

predicted_df = pd.DataFrame({'label_3': predicted_label_test})

# Save the DataFrame to a CSV file
predicted_df.to_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label3.csv', index=False)

"""# Label 4

"""

#@title svm Classifier without pca
from sklearn import svm

# For classification with a linear kernel
classifier = svm.SVC(kernel='linear', C=1)

# For regression with a linear kernel
# classifier = svm.SVR(kernel='linear', C=1.0)

# Train the model
# classifier.fit(x_train_df, y_train_df)
classifier.fit(X, label_4)

#predict for validation
y_valid_pred = classifier.predict(X_valid)

#accuracy
print("accuracy_score: ",metrics.accuracy_score(label_4_valid, y_valid_pred))

#@title svm classifier with cpa
from sklearn import svm

# For classification with a linear kernel
classifier = svm.SVC(kernel='linear', C=1)

# For regression with a linear kernel
# classifier = svm.SVR(kernel='linear', C=1.0)

# Train the model
# classifier.fit(x_train_df, y_train_df)
classifier.fit(x_train_pca, label_4)

#predict for validation
y_valid_pred = classifier.predict(x_valid_pca)

#accuracy
print("accuracy_score: ",metrics.accuracy_score(label_4_valid, y_valid_pred))

#@title Hyper Parameter testing
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.model_selection import cross_val_score, StratifiedKFold
from scipy.stats import uniform
from sklearn.experimental import enable_halving_search_cv
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV,HalvingGridSearchCV

# Define the hyperparameter grid
param_grid = {
    'C': [0.1,1,10,20,100],
    'kernel': ['linear', 'rbf', 'poly', 'sigmoid'],  # Experiment with different kernels
    'gamma':['scale', 'auto'],
    'degree': [1,2,3,4]

}

# Create an SVM classifier
svm_classifier = SVC(class_weight='balanced')

# Perform grid search with cross-validation
grid_search = HalvingGridSearchCV(svm_classifier, param_grid, scoring='accuracy', cv=5,n_jobs=-1, factor=2, verbose=1)
grid_search.fit(x_train_pca, label_4)

# Get the best model and hyperparameters
best_svm_classifier = grid_search.best_estimator_
best_params = grid_search.best_params_

# Make predictions on the validation set
y_pred = best_svm_classifier.predict(x_valid_pca)

# Evaluate the model
print("Best Hyperparameters:", best_params)
print("accuracy_score: ",metrics.accuracy_score(label_4_valid, y_pred))

#@title Making csv for label 4
predicted_label_test = best_svm_classifier.predict(x_test_pca)

predicted_df = pd.DataFrame({'label_4': predicted_label_test})

# Save the DataFrame to a CSV file
predicted_df.to_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label4.csv', index=False)

"""#Label 2

"""

#@title svm classifier without pca
from sklearn import svm

# For classification with a linear kernel
classifier4 = svm.SVC(kernel='rbf', C=1)

# For regression with a linear kernel
# classifier = svm.SVR(kernel='linear', C=1.0)

# Train the model
# classifier.fit(x_train_df, y_train_df)
classifier4.fit(X, label_2)

#predict for validation
y_valid_pred = classifier4.predict(X_valid)

#accuracy
print("accuracy_score: ",metrics.accuracy_score(label_2_valid, y_valid_pred))

#@title svm classifier with pca
from sklearn import svm

# For classification with a linear kernel
classifier2 = svm.SVC(kernel='linear', C=1)

# For regression with a linear kernel
# classifier = svm.SVR(kernel='linear', C=1.0)

# Train the model
# classifier.fit(x_train_df, y_train_df)
classifier2.fit(x_train_pca, label_2)

#predict for validation
y_valid_pred = classifier2.predict(x_valid_pca)

#accuracy
print("accuracy_score: ",metrics.accuracy_score(label_2_valid, y_valid_pred))

#@title Hyper parameter tuning
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.model_selection import cross_val_score, StratifiedKFold
from scipy.stats import uniform
from sklearn.experimental import enable_halving_search_cv
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV,HalvingGridSearchCV

# Define the hyperparameter grid
param_grid = {
    'C': [0.1,1,10,20,100],
    'kernel': ['linear', 'rbf', 'poly', 'sigmoid'],  # Experiment with different kernels
    'gamma':['scale', 'auto'],
    'degree': [1,2,3,4]

}

# Create an SVM classifier
svm_classifier2 = SVC(class_weight='balanced')

# Perform grid search with cross-validation
grid_search = HalvingGridSearchCV(svm_classifier2, param_grid, scoring='accuracy', cv=5,n_jobs=-1, factor=2, verbose=1)
grid_search.fit(x_train_pca, label_2)

# Get the best model and hyperparameters
best_svm_classifier = grid_search.best_estimator_
best_params = grid_search.best_params_

# Make predictions on the validation set
y_pred = best_svm_classifier.predict(x_valid_pca)

# Evaluate the model
print("Best Hyperparameters:", best_params)
print("accuracy_score: ",metrics.accuracy_score(label_2_valid, y_pred))

#@title svm classifier with best score parameters
from sklearn import svm
clas_l2 = svm.SVC(kernel='poly', C=20, gamma='scale', degree=1)

clas_l2.fit(X, label_2)

#predict for validation
y_valid_2 = clas_l2.predict(X_valid)

#accuracy
print("accuracy_score: ",metrics.accuracy_score(label_2_valid, y_valid_2))

#predict
# y_test_pred = classifier.predict(x_test_df)
#y_test_predict_after_pca = classifier.predict(x_test_df_pca)

#@title making csv for label 2
lab_2_val = clas_l2.predict(X_test)

pred_df_2 = pd.DataFrame({'label_2': lab_2_val})

# Save the DataFrame to a CSV file
pred_df_2.to_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label2final.csv', index=False)

# @title SVM hyperparameter tuning
from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC

# Define the hyperparameter grid
param_grid = {
    'C': [1,10,20],
    'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],
    'degree': [2, 3, 4],  # For polynomial kernel
    'gamma': ['scale', 'auto'] + [0.1, 1, 10],  # For rbf and sigmoid kernels
    'tol': [1e-4, 1e-3, 1e-2],
    'class_weight': [None, 'balanced']
}

# Create the SVM classifier
svm = SVC()

# Perform grid search with cross-validation
grid_search = GridSearchCV(svm, param_grid, cv=5, scoring='accuracy', n_jobs=-1, verbose=3)
grid_search.fit(x_train_pca, label_3)

# Get the best hyperparameters
best_params = grid_search.best_params_
print("best parameters:", best_params)

"""#Combining CSV

"""

# df1 = pd.read_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label1.csv')
# df2 = pd.read_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label2.csv')
# df3 = pd.read_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label3.csv')
# df4 = pd.read_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label4.csv')

# combined_df = pd.concat([df1, df2, df3, df4], ignore_index=True)
# combined_df.to_csv('/content/drive/MyDrive/ML/Results/Layer7_Final.csv', index=True)

# Read the CSV files into separate DataFrames
# df1 = pd.read_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label1.csv', header=None, names=['label_1'])
# df2 = pd.read_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label2.csv', header=None, names=['label_2'])
# df3 = pd.read_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label3.csv', header=None, names=['label_3'])
# df4 = pd.read_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label4.csv', header=None, names=['label_4'])

# # Combine the DataFrames into one DataFrame using concat
# combined_df = pd.concat([df1, df2, df3, df4], axis=1, ignore_index=True)

# # Add an index column
# combined_df['Index'] = combined_df.index

# # Save the combined DataFrame to a new CSV file
# combined_df.to_csv('/content/drive/MyDrive/ML/Results/Layer7_Final2.csv', index=False)


# import pandas as pd

# Read the CSV files into separate DataFrames
df1 = pd.read_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label1.csv')
df2 = pd.read_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label2.csv')
df3 = pd.read_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label3.csv')
df4 = pd.read_csv('/content/drive/MyDrive/ML/Results/predicted_L7_label4.csv')


# Combine the DataFrames into one DataFrame with the index as the first column
combined_df = pd.concat([df1, df2, df3, df4], axis=1, ignore_index=False)

# Add an index column and move it to the first position
combined_df.insert(0, 'ID', range(1,len(combined_df)+1))

# Save the combined DataFrame to a new CSV file
combined_df.to_csv('/content/drive/MyDrive/ML/Results/Layer7_Final.csv', index=False)